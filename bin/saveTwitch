#!/usr/bin/env node

var gamesApi = require('../api/twitch/games');
var streamsApi = require('../api/twitch/streams');

var Game = require('../models/Game');
var GameSnapshot = require('../models/GameSnapshot');
var Channel = require('../models/Channel');
var ChannelSnapshot = require('../models/ChannelSnapshot');

var { Client } = require('pg');
var pgOpts = process.env.DATABASE_URL ? {
    connectionString: process.env.DATABASE_URL,
    ssl: true
} : null;
var client = new Client(pgOpts);
client.connect();

var TIMESTAMP = new Date();

var handleErr = (err) => {
    if (!err) return;
    console.log(err.detail || err.hint);
};

var saveGames = (games) => {
    return new Promise((resolve, reject) => {
        var promises = [];
        games.forEach(g => {
            var game = new Game(client, g._id, {
                name: g.name,
                box_art: g.box.large,
                logo_art: g.logo.large
            });
            promises.push(game.save());
        });
        return Promise.all(promises).then(() => {
            resolve(games);
        });
    });
};

var saveChannels = (channels) => {
    return new Promise((resolve, reject) => {
        var promises = [];
        channels.forEach(c => {
            var channel = new Channel(client, c._id, {
                name: c.name,
                display_name: c.display_name,
                url: c.url,
                logo_art: c.logo
            });
            promises.push(channel.save());
        });
        return Promise.all(promises).then(() => {
            resolve(channels);
        });
    });
};

var saveGameSnapshots = (snapshots) => {
    return new Promise((resolve, reject) => {
        var promises = [];
        snapshots.forEach(s => {
            var snapshot = new GameSnapshot(client, s.game._id, TIMESTAMP, {
                viewers: s.viewers,
                channels: s.channels
            });
            promises.push(snapshot.save());
        });
        return Promise.all(promises).then(() => {
            resolve(snapshots);
        });
    });
};

var saveChannelSnapshots = (snapshots) => {
    return new Promise((resolve, reject) => {
        var promises = [];
        snapshots.forEach(s => {
            var snapshot = new ChannelSnapshot(client, s.channel._id, TIMESTAMP, {
                game_id: s.game_id,
                viewers: s.viewers
            });
            promises.push(snapshot.save());
        });
        return Promise.all(promises).then(() => {
            resolve(snapshots);
        });
    });
};

var gameSnaps = [];
var channelSnaps = [];
gamesApi()
    .then((res) => {
        gameSnaps = res;

        // get and format stream data
        var promises = [];
        gameSnaps.forEach(g => {
            var p = streamsApi({ game: g.game.name }).then((streams) => {
                streams.forEach(s => { s.game_id = g.game._id; })
                channelSnaps = channelSnaps.concat.apply([], streams);
            });
            promises.push(p);
        });
        return Promise.all(promises);
    }, handleErr)
    .then(() => {
        // save or update games and channels
        var games = gameSnaps.map((g) => { return g.game; });
        var channels = channelSnaps.map((c) => { return c.channel; });
        return Promise.all([saveGames(games), saveChannels(channels)]);
    }, handleErr)
    .then(() => {
        // save snapshots
        return Promise.all([saveGameSnapshots(gameSnaps), saveChannelSnapshots(channelSnaps)]);
    }, handleErr)
    .then(() => {
        client.end();
    }, (err) => {
        handleErr(err);
        client.end();
    });
